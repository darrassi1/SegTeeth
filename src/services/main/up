import vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';
import vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';
import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';
import vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';
import vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';
import vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';
import vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';
import { useState } from 'react';
import '@kitware/vtk.js/Rendering/Profiles/Geometry';

import { FileAxis3d, UploadCloud } from 'lucide-react';
import { Loader } from './../../components/Loader';

function VTKViewer() {
  const [file, setFile] = useState();
  // const [three, setThree] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isPredicted, setIsPredicted] = useState(false);

  // const fileName = files ? files.name : "File Uploaded";
  // const fileName = "File Uploaded! Double Click To View";

  // const generateModel = (e) => {
  //   e.preventDefault();
  //   setThree(fileName);
  // };

  const handleUpload = async (event) => {
    try {
      setIsLoading(true);

      event.preventDefault();

      console.log('Starting Segmentation...');

      const formData = new FormData(event.target);
      const response = await fetch('http://127.0.0.1:8000/api/v1/predict/alpha', {
        method: 'POST',
        body: formData,
      });

      const jsonData = await response.json();
      const objData = jsonData.prediction_file;

      const blob = new Blob([objData], { type: 'text/xml' });
      const vtpFilePath = URL.createObjectURL(blob);

      loadVTPTest(vtpFilePath);
    } catch {
      console.log("Error");
    }
  };

  // function getImgData() {
  //   const files = chooseFile.files[0];
  //   if (files) {
  //     const fileReader = new FileReader();
  //     fileReader.readAsDataURL(files);
  //     // fileReader.addEventListener("load", function () {
  //     //   imgPreview.style.display = "block";
  //     //   imgPreview.innerHTML = '<img src="' + this.result + '" />';
  //     // });
  //   }
  // }


  const loadVTPTest = (objData) => {
    const vtkRenderScreen = vtkFullScreenRenderWindow.newInstance({
      container: document.querySelector('#vtk-container'),
      background: [0.118, 0.161, 0.231]
    });

    // Create a VTP reader
    const reader = vtkXMLPolyDataReader.newInstance();

    console.log(objData);

    reader.setUrl(objData);

    reader.loadData().then(() => {

      // Get the VTP output data
      const vtpOutput = reader.getOutputData();

      // Get the materialid array from the VTP data
      // const materialidArray = vtpOutput.getCellData().getArrayByName('MaterialIds');
      const materialidArray = vtpOutput.getCellData().getArrayByName("Label");

      // Map scalar array through the lookup table
      materialidArray.setName("Scalars"); // Make sure the array has a name
      vtpOutput.getCellData().setScalars(materialidArray);

      console.log("materialidArray.getData(): ", materialidArray.getData())

      // Create a color transfer function
      const colorTransferFunction = vtkColorTransferFunction.newInstance();

      // Create colors for 15 different classes (you can adjust these)
      const classColors = [
        [0.878, 0.878, 0.878],
        [0.839, 0.153, 0.157],  // Red
        [0.121, 0.466, 0.705],  // Blue
        [0.172, 0.627, 0.172],  // Green
        [0.580, 0.404, 0.741],  // Purple
        [1.000, 0.498, 0.054],  // Orange
        [0.890, 0.467, 0.761],  // Pink
        [0.498, 0.498, 0.498],  // Gray
        [0.737, 0.741, 0.133],  // Yellow
        [0.090, 0.745, 0.811],  // Teal
        [0.682, 0.780, 0.909],  // Light Blue
        [0.090, 0.745, 0.172],  // Bright Green
        [0.831, 0.607, 0.101],  // Gold
        [0.647, 0.380, 0.094],  // Brown
        [0.596, 0.306, 0.639],  // Dark Purple
        [0.180, 0.180, 0.180]   // Dark Gray
      ];


      const uniqueMaterialIds = new Set(materialidArray.getData());
      const numColors = classColors.length;

      uniqueMaterialIds.forEach((materialid, index) => {
        // Normalize the index based on the unique material IDs
        const normalizedIndex = index / (uniqueMaterialIds.size - 1);

        // Calculate the color index and wrap around within the valid range
        const colorIndex = Math.floor(normalizedIndex * numColors) % numColors;

        const color = classColors[colorIndex];
        colorTransferFunction.addRGBPoint(materialid, color[0], color[1], color[2]);
      });

      // Apply symmetric colorization


      // Create mapper and actor
      const mapper = vtkMapper.newInstance();
      mapper.setInputData(reader.getOutputData());
      mapper.setLookupTable(colorTransferFunction);

      mapper.setUseLookupTableScalarRange(true); // Ensure correct scalar range

      // Map scalars through the lookup table
      mapper.setScalarModeToUseCellData();
      mapper.setScalarVisibility(true);

      mapper.setColorModeToMapScalars(); // Map colors based on the materialid values

      const actor = vtkActor.newInstance();
      actor.setMapper(mapper);

      // create orientation widget
      const axes = vtkAxesActor.newInstance();
      const orientationWidget = vtkOrientationMarkerWidget.newInstance({
        actor: axes,
        interactor: vtkRenderScreen.getRenderWindow().getInteractor(),
      });
      orientationWidget.setEnabled(true);
      orientationWidget.setViewportCorner(
        vtkOrientationMarkerWidget.Corners.BOTTOM_RIGHT
      );

      orientationWidget.setViewportSize(0.15);
      orientationWidget.setMinPixelSize(100);
      orientationWidget.setMaxPixelSize(300);

      vtkRenderScreen.getRenderer().addActor(actor);
      vtkRenderScreen.getRenderer().resetCamera();

      //Start rendering
      vtkRenderScreen.getRenderWindow().render();

      setIsPredicted(true);
      setIsLoading(false);
    });
  }

  return (
    <>
      <div className="bg-slate-700 flex-box flex-col md:flex-row w-full px-10 rounded-md">
        <form id="upload-form" onSubmit={handleUpload}>
          <div className="w-full py-12 file flex-box flex-col">
            <label
              htmlFor="3d_file"
              className="flex-box flex-col p-3 my-auto text-center"
            >
              <UploadCloud size={28} strokeWidth={2.5} />
              <p>Click to upload or drag and drop</p>
            </label>
            <input
              className="3d-file"
              type="file"
              name="3d_file"
              accept=".obj"
              // ref={model}
              onChange={(e) => {
                setFile(e.target.files[0].name);
                // setThree(e.target.files[0].name);
              }}
              id="3d_file"
              required
            />
            <div className="fileName text-white">
              <p className="bg-slate-800 py-4 px-8 rounded-xl font-normal text-slate-300">
                <FileAxis3d width={18} style={{ display: 'inline-block' }} /> Uploaded file: <span className="font-semibold text-white">{file ? file : "None"}</span></p>
            </div>
            <div className="text-center pt-8 text-slate-100 text-xl font-semibold">
              Supported files
            </div>
            <div className="text-center text-slate-300 text-md py-3">
              OBJ, STL, PLY, VTP, GLB, GLTG, FBX
            </div>
            {file ?
              <button type="submit" className="px-10 py-3.5 my-4 bg-slate-500 hover:bg-slate-400 text-center text-white text-base font-semibold leading-tight mx-2 rounded-lg">Start Prediction</button> : ""}

          </div>
        </form >
      </div >

      <div className="mt-12 w-full">
        {isLoading ? <div className="text-white my-8 text-3xl font-semibold  text-center">
          Predicted segmentation:
        </div> : ''}

        {isLoading && (
          <div className="p-8 rounded-lg w-full flex-box bg-slate-700">
            <Loader />
          </div>
        )}

        <div id="vtk-container" />

        {isPredicted ? <button type="submit" className="px-10 py-4 my-8 bg-slate-500 hover:bg-slate-400 text-center text-white text-base font-semibold leading-tight mx-2 rounded-lg">Donwload Predicted File</button> : ''}
      </div>
    </>

  );
}

export default VTKViewer;